{"version":3,"file":"js/9565.72b2a778.js","mappings":"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","sources":["webpack://ionic-car-trading/./node_modules/@capacitor-firebase/authentication/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport { applyActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, FacebookAuthProvider, getAdditionalUserInfo, getAuth, GoogleAuthProvider, OAuthCredential, OAuthProvider, sendEmailVerification, sendPasswordResetEmail, signInWithCustomToken, signInWithEmailAndPassword, signInWithPopup, updateEmail, updatePassword, } from 'firebase/auth';\nexport class FirebaseAuthenticationWeb extends WebPlugin {\n    constructor() {\n        super();\n        const auth = getAuth();\n        auth.onAuthStateChanged(user => this.handleAuthStateChange(user));\n    }\n    async applyActionCode(options) {\n        const auth = getAuth();\n        return applyActionCode(auth, options.oobCode);\n    }\n    async createUserWithEmailAndPassword(options) {\n        const auth = getAuth();\n        const userCredential = await createUserWithEmailAndPassword(auth, options.email, options.password);\n        return this.createSignInResult(userCredential, null);\n    }\n    async confirmPasswordReset(options) {\n        const auth = getAuth();\n        return confirmPasswordReset(auth, options.oobCode, options.newPassword);\n    }\n    async getCurrentUser() {\n        const auth = getAuth();\n        const userResult = this.createUserResult(auth.currentUser);\n        const result = {\n            user: userResult,\n        };\n        return result;\n    }\n    async getIdToken(options) {\n        const auth = getAuth();\n        if (!auth.currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        const idToken = await auth.currentUser.getIdToken(options === null || options === void 0 ? void 0 : options.forceRefresh);\n        const result = {\n            token: idToken || '',\n        };\n        return result;\n    }\n    async sendEmailVerification() {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return sendEmailVerification(currentUser);\n    }\n    async sendPasswordResetEmail(options) {\n        const auth = getAuth();\n        return sendPasswordResetEmail(auth, options.email);\n    }\n    async setLanguageCode(options) {\n        const auth = getAuth();\n        auth.languageCode = options.languageCode;\n    }\n    async signInWithApple(options) {\n        const provider = new OAuthProvider('apple.com');\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithCustomToken(options) {\n        const auth = getAuth();\n        const userCredential = await signInWithCustomToken(auth, options.token);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithEmailAndPassword(options) {\n        const auth = getAuth();\n        const userCredential = await signInWithEmailAndPassword(auth, options.email, options.password);\n        return this.createSignInResult(userCredential, null);\n    }\n    async signInWithFacebook(options) {\n        const provider = new FacebookAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = FacebookAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithGithub(options) {\n        const provider = new OAuthProvider('github.com');\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithGoogle(options) {\n        const provider = new GoogleAuthProvider();\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = GoogleAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithMicrosoft(options) {\n        const provider = new OAuthProvider('microsoft.com');\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithPhoneNumber(_options) {\n        throw new Error('Not implemented on web.');\n    }\n    async signInWithPlayGames() {\n        throw new Error('Not available on web.');\n    }\n    async signInWithTwitter(options) {\n        const provider = new OAuthProvider('twitter.com');\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signInWithYahoo(options) {\n        const provider = new OAuthProvider('yahoo.com');\n        this.applySignInOptions(options || {}, provider);\n        const auth = getAuth();\n        const userCredential = await signInWithPopup(auth, provider);\n        const authCredential = OAuthProvider.credentialFromResult(userCredential);\n        return this.createSignInResult(userCredential, authCredential);\n    }\n    async signOut() {\n        const auth = getAuth();\n        await auth.signOut();\n    }\n    async updateEmail(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return updateEmail(currentUser, options.newEmail);\n    }\n    async updatePassword(options) {\n        const auth = getAuth();\n        const currentUser = auth.currentUser;\n        if (!currentUser) {\n            throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n        }\n        return updatePassword(currentUser, options.newPassword);\n    }\n    async useAppLanguage() {\n        const auth = getAuth();\n        auth.useDeviceLanguage();\n    }\n    async useEmulator(options) {\n        const auth = getAuth();\n        const port = options.port || 9099;\n        connectAuthEmulator(auth, `${options.host}:${port}`);\n    }\n    handleAuthStateChange(user) {\n        const userResult = this.createUserResult(user);\n        const change = {\n            user: userResult,\n        };\n        this.notifyListeners('authStateChange', change);\n    }\n    applySignInOptions(options, provider) {\n        if (options.customParameters) {\n            const customParameters = {};\n            options.customParameters.map(parameter => {\n                customParameters[parameter.key] = parameter.value;\n            });\n            provider.setCustomParameters(customParameters);\n        }\n        if (options.scopes) {\n            for (const scope of options.scopes) {\n                provider.addScope(scope);\n            }\n        }\n    }\n    createSignInResult(userCredential, authCredential) {\n        const userResult = this.createUserResult(userCredential.user);\n        const credentialResult = this.createCredentialResult(authCredential);\n        const additionalUserInfoResult = this.createAdditionalUserInfoResult(userCredential);\n        const result = {\n            user: userResult,\n            credential: credentialResult,\n            additionalUserInfo: additionalUserInfoResult,\n        };\n        return result;\n    }\n    createCredentialResult(credential) {\n        if (!credential) {\n            return null;\n        }\n        const result = {\n            providerId: credential.providerId,\n        };\n        if (credential instanceof OAuthCredential) {\n            result.accessToken = credential.accessToken;\n            result.idToken = credential.idToken;\n            result.secret = credential.secret;\n        }\n        return result;\n    }\n    createUserResult(user) {\n        if (!user) {\n            return null;\n        }\n        const result = {\n            displayName: user.displayName,\n            email: user.email,\n            emailVerified: user.emailVerified,\n            isAnonymous: user.isAnonymous,\n            phoneNumber: user.phoneNumber,\n            photoUrl: user.photoURL,\n            providerId: user.providerId,\n            tenantId: user.tenantId,\n            uid: user.uid,\n        };\n        return result;\n    }\n    createAdditionalUserInfoResult(credential) {\n        const additionalUserInfo = getAdditionalUserInfo(credential);\n        if (!additionalUserInfo) {\n            return null;\n        }\n        const { isNewUser, profile, providerId, username } = additionalUserInfo;\n        const result = {\n            isNewUser,\n        };\n        if (providerId !== null) {\n            result.providerId = providerId;\n        }\n        if (profile !== null) {\n            result.profile = profile;\n        }\n        if (username !== null && username !== undefined) {\n            result.username = username;\n        }\n        return result;\n    }\n}\nFirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN = 'No user is signed in.';\n//# sourceMappingURL=web.js.map"],"names":["FirebaseAuthenticationWeb","constructor","super","auth","onAuthStateChanged","user","this","handleAuthStateChange","async","options","oobCode","userCredential","email","password","createSignInResult","newPassword","userResult","createUserResult","currentUser","result","Error","ERROR_NO_USER_SIGNED_IN","idToken","getIdToken","forceRefresh","token","languageCode","provider","applySignInOptions","authCredential","_options","signOut","newEmail","useDeviceLanguage","port","host","change","notifyListeners","customParameters","map","parameter","key","value","setCustomParameters","scopes","scope","addScope","credentialResult","createCredentialResult","additionalUserInfoResult","createAdditionalUserInfoResult","credential","additionalUserInfo","providerId","accessToken","secret","displayName","emailVerified","isAnonymous","phoneNumber","photoUrl","photoURL","tenantId","uid","isNewUser","profile","username","undefined"],"sourceRoot":""}